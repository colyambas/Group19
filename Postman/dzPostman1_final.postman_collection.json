{
	"info": {
		"_postman_id": "67937d02-bb36-4d29-ab8c-d4c95199d7e7",
		"name": "dzPostman1_final",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1_login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData=JSON.parse(responseBody);\r",
							"pm.environment.set(\"token\", jsonData.token);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "a",
							"type": "text"
						},
						{
							"key": "password",
							"value": "a",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://168.119.182.98:5002/login",
					"protocol": "http",
					"host": [
						"168",
						"119",
						"182",
						"98"
					],
					"port": "5002",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "2_user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/*\r",
							"2) Проверка структуры json в ответе.\r",
							"resp.\r",
							"{'start_qa_salary':salary,\r",
							" 'qa_salary_after_6_months': salary * 2,\r",
							" 'qa_salary_after_12_months': salary * 2.9,\r",
							" 'person': {'u_name':[user_name, salary, age],\r",
							"                                'u_age':age,\r",
							"                                'u_salary_1.5_year': salary * 4}\r",
							"                                }\r",
							"*/\r",
							"var myjsonData = pm.response.json();\r",
							"\r",
							"const schema = {\r",
							"   // \"items\" : {\r",
							"        \"type\" : \"object\",\r",
							"        \"required\" : [\"start_qa_salary\",\"qa_salary_after_6_months\", \"qa_salary_after_12_months\", \"person\"], \r",
							"        \"properties\" : {\r",
							"            \"start_qa_salary\" : { \"type\" : \"number\"},\r",
							"            \"qa_salary_after_6_months\" : { \"type\" : \"number\"},\r",
							"            \"qa_salary_after_12_months\" : { \"type\" : \"number\"},\r",
							"            \"person\" : {\r",
							"                \"type\" : \"object\",\r",
							"                \"required\" : [\"u_age\", \"u_salary_1_5_year\", \"u_name\"],\r",
							"                    \"u_age\" : { \"type\" : \"integer\"},\r",
							"                    \"u_salary_1.5_year\" : { \"type\" : \"integer\"},\r",
							"                    \"u_name\" : {\r",
							"                        \"type\" : \"array\",\r",
							"                        \"required\" : [\"user_name\", \"salary\", \"age\"],\r",
							"                \"properties\" : {\r",
							"                        \"user_name\" : {\"type\" : \"string\"},\r",
							"                        \"salary\" : {\"type\" : \"number\"},\r",
							"                        \"age\" : {\"type\" : \"number\"}\r",
							"                    },\r",
							"                   \r",
							"                }\r",
							"            }\r",
							"        },\r",
							"      \r",
							"};     \r",
							"\r",
							"pm.test(\"Validate schema\", function() {\r",
							"   pm.expect(tv4.validate(myjsonData,schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Test response with scheme\", () =>{\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var req=JSON.parse(request.data);\r",
							"\r",
							"pm.test(\"Test multiply result\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.qa_salary_after_6_months/2).to.eql(req.salary);\r",
							"    pm.expect(jsonData.qa_salary_after_12_months/2.9).to.eql(req.salary);\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year/4).to.eql(req.salary);\r",
							"});\r",
							"\r",
							"//3.3) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://116.203.27.46:5002 (http://188.130.138.105:5001/new_data)/get_test_user\r",
							"var Envir_u_sal_1_5 = myjsonData.person.u_salary_1_5_year;\r",
							"pm.environment.set(\"Envir_u_sal_1_5\", myjsonData.person.u_salary_1_5_year);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\" : 33,\r\n    \"salary\" : 1000,\r\n    \"name\" : \"Nick\",\r\n    \"auth_token\" : \"{{token}}\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://168.119.182.98:5002/user_info",
					"protocol": "http",
					"host": [
						"168",
						"119",
						"182",
						"98"
					],
					"port": "5002",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "3_new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/*//2) Проверка структуры json в ответе.\r",
							"Resp.\r",
							"{'name':name,\r",
							"  'age': int(age),\r",
							"  'salary': [salary, str(salary*2), str(salary*3)]}\r",
							"*/\r",
							"var myjsonData = pm.response.json();\r",
							"\r",
							"var schema = {\r",
							"    \"type\" : \"object\",\r",
							"    \"required\" : [\"name\", \"age\", \"salary\"],\r",
							"    \"properties\" : {\r",
							"        \"name\" : {\"type\" : \"string\"},\r",
							"        \"age\" : { \"type\" : \"number\"},\r",
							"         \"salary\" : {\r",
							"             \"type\" : \"array\",\r",
							"             \"items\" : [\r",
							"                 {\"type\" : \"number\"},\r",
							"                 {\"type\" : \"string\"},\r",
							"                 {\"type\" : \"string\"},\r",
							"             ],\r",
							"         },\r",
							"    },\r",
							"};\r",
							"  \r",
							"pm.test(\"Validate schema\", function() {\r",
							"   pm.expect(tv4.validate(myjsonData,schema), true,true).to.be.true;\r",
							"});\r",
							"pm.test(\"Test response with scheme\", () =>{\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//3) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://116.203.27.46:5002 (http://188.130.138.105:5001/new_data)/get_test_user\r",
							"//4) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var req = pm.request.body.formdata.toObject();\r",
							"\r",
							"pm.test(\"Test multiply result\", function () {\r",
							"    pm.expect(myjsonData.salary[1]/2).to.eql(Number(req.salary));\r",
							"    pm.expect(myjsonData.salary[2]/3).to.eql(Number(req.salary));\r",
							"});\r",
							"//5) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"\r",
							"pm.test(\"The second is greater than the first and zero\", function () {\r",
							"    pm.expect(Number(myjsonData.salary[2])).to.be.above(Number(myjsonData.salary[1]));\r",
							"    pm.expect(Number(myjsonData.salary[2])).to.be.above(myjsonData.salary[0]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{Envir_u_sal_1_5}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Nick",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}\n",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://168.119.182.98:5002/new_data",
					"protocol": "http",
					"host": [
						"168",
						"119",
						"182",
						"98"
					],
					"port": "5002",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "4_test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/*\r",
							"2) Проверка структуры json в ответе.\r",
							"Resp.\r",
							"{'name': name,\r",
							" 'age': age,\r",
							" 'daily_food':weight * 0.012,\r",
							" 'daily_sleep': weight * 2.5}\r",
							" */\r",
							"var myjsonData = pm.response.json();\r",
							"\r",
							"var schema = {\r",
							"    \"type\" : \"object\",\r",
							"    \"required\" : [\"name\", \"age\", \"daily_food\", \"daily_sleep\"],\r",
							"    \"properties\" : {\r",
							"        \"name\" : {\"type\" : \"string\"},\r",
							"        \"age\" : { \"type\" : \"number\"},\r",
							"         \"daily_food\" : { \"type\" : \"number\"},\r",
							"         \"daily_sleep\" : { \"type\" : \"number\"},\r",
							"    },\r",
							"};\r",
							"  \r",
							"pm.test(\"Validate schema\", function() {\r",
							"   pm.expect(tv4.validate(myjsonData,schema), true,true).to.be.true;\r",
							"});\r",
							"pm.test(\"Test response with scheme\", () =>{\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"var req = pm.request.body.formdata.toObject();\r",
							"console.log(req.weight);\r",
							"\r",
							"pm.test(\"Test multiply result\", function () {\r",
							"    pm.expect(myjsonData.daily_food/0.012).to.eql(Number(req.weight));\r",
							"    pm.expect(myjsonData.daily_sleep/2.5).to.eql(Number(req.weight));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "87",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Nick",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://168.119.182.98:5002/test_pet_info",
					"protocol": "http",
					"host": [
						"168",
						"119",
						"182",
						"98"
					],
					"port": "5002",
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "5_get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/*2) Проверка структуры json в ответе.\r",
							"Resp.\r",
							"{'name': name,\r",
							" 'age':age,\r",
							" 'salary': salary,\r",
							" 'family':{'children':[['Alex', 24],['Kate', 12]],\r",
							" 'u_salary_1.5_year': salary * 4}\r",
							"  }\r",
							"  */\r",
							"var schema = {\r",
							"    \"type\" : \"object\",\r",
							"    \"required\" : [\"name\", \"age\", \"salary\", \"family\"],\r",
							"    \"properties\" : {\r",
							"        \"name\" : {\"type\" : \"string\"},\r",
							"        \"age\" : {\"type\" : \"number\"},\r",
							"        \"salary\" : {\"type\" : \"number\"},\r",
							"        \"family\" : {\r",
							"            \"type\" : \"object\",\r",
							"            \"required\" : [\"children\", \"u_salary_1_5_year\"],\r",
							"            \"properties\" : {\r",
							"                \"u_salary_1_5_year\" : { \"type\" : \"number\"},\r",
							"                \"children\" : {\r",
							"                    \"type\" : \"array\",\r",
							"                    \"items\" : [ \r",
							"                        {\"type\" : \"array\",\r",
							"                        \"items\" : [\r",
							"                            { 'Alex' : \"string\"},\r",
							"                            { 24 : \"number\"}\r",
							"                        ]},\r",
							"                        {\"type\" : \"array\",\r",
							"                        \"items\" : [\r",
							"                            {'Kate' : \"string\"},\r",
							"                            { 12 : \"number\"}\r",
							"                        ]},\r",
							"                    ],\r",
							"                },\r",
							"            }\r",
							"        }\r",
							"    //    \"u_salary_1_5_year\" : {\"type\" : \"number\"},\r",
							"    }\r",
							"}\r",
							"var myjsonData = pm.response.json();\r",
							"pm.test(\"Validate schema\", function() {\r",
							"   pm.expect(tv4.validate(myjsonData,schema), true,true).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Test response with scheme\", () =>{\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"var jsonData = pm.response.json();\r",
							"var req = pm.request.body.formdata.toObject(); \r",
							"var Envir_name = req.name;\r",
							"\r",
							"pm.environment.set(Envir_name, req.name);\r",
							"\r",
							"pm.test(\"Test resp.name == environment.age\", function () {\r",
							"   \r",
							"    pm.expect(jsonData.name).to.equal(Envir_name);\r",
							"})\r",
							"//4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"pm.test(\"Test responce.age == request.age\", function () {\r",
							"    pm.expect(jsonData.age).to.equal(req.age);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{Envir_u_sal_1_5}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Nick",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://168.119.182.98:5002/get_test_user",
					"protocol": "http",
					"host": [
						"168",
						"119",
						"182",
						"98"
					],
					"port": "5002",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "6_currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var Currency=pm.response.json();\r",
							"let List_cur = new Array; // массив для значений Cur_ID\r",
							"let i=0;\r",
							"//заполняем массив\r",
							"while (Currency[i] !=null){\r",
							"  List_cur[i]=Currency[i].Cur_ID;\r",
							"    i++;\r",
							"}\r",
							"//из массива создаем новый обьект JSON и передаем его в окружение\r",
							"let temp = JSON.stringify(List_cur);\r",
							"let Envir_Currency=JSON.parse(temp);\r",
							"pm.environment.set(\"Envir_Currency\", Envir_Currency);\r",
							"\r",
							"//1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"//В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"//теперь мы знаем количество валют иможем установить предел рандома\r",
							"let Rand = _.random(0, i);\r",
							"pm.environment.set(\"RandomCurrCode\", Envir_Currency[Rand]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://168.119.182.98:5002/currency",
					"protocol": "http",
					"host": [
						"168",
						"119",
						"182",
						"98"
					],
					"port": "5002",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "7_curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//2) Проверка структуры json в ответе.\r",
							"/*\r",
							"Resp.\r",
							"{\r",
							"    \"Cur_Abbreviation\": str\r",
							"    \"Cur_ID\": int,\r",
							"    \"Cur_Name\": str,\r",
							"    \"Cur_OfficialRate\": float,\r",
							"    \"Cur_Scale\": int,\r",
							"    \"Date\": str\r",
							"}\r",
							"*/\r",
							"var myjsonData = pm.response.json();\r",
							"\r",
							"var schema = {\r",
							"    \"type\" : \"object\",\r",
							"    \"required\" : [\"Cur_Abbreviation\", \"Cur_ID\", \"Cur_Name\", \"Cur_OfficialRate\", \"Cur_Scale\", \"Date\"],\r",
							"    \"properties\" : {\r",
							"        \"Cur_Abbreviation\" : {\"type\" : \"string\"},\r",
							"        \"Cur_ID\" : { \"type\" : \"int\"},\r",
							"         \"Cur_Name\" : { \"type\" : \"string\"},\r",
							"         \"Cur_OfficialRate\" : { \"type\" : \"float\"},\r",
							"         \"Cur_Scale\" : { \"type\" : \"int\"},\r",
							"         \"Date\" : {\"type\" : \"string\"}\r",
							"    },\r",
							"};\r",
							"\r",
							"pm.test(\"Validate schema\", function() {\r",
							"   pm.expect(tv4.validate(myjsonData,schema), true,true).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Test response with scheme\", () =>{\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//***\r",
							"//1) получить список валют\r",
							"\r",
							"//2) итерировать список валют\r",
							"\r",
							"var Envir_Currency1 = pm.environment.get(\"Envir_Currency\");\r",
							"\r",
							"var u_token=pm.environment.get(\"token\");\r",
							"var i=0;\r",
							"\r",
							"//3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
							"\r",
							"do{\r",
							"pm.sendRequest({\r",
							"url: 'http://168.119.182.98:5002/curr_byn',\r",
							"method: 'POST',\r",
							"header: {\"Content-Type\": \"multipart/form-data\"},\r",
							"body: {\r",
							"   mode : 'formdata',\r",
							"   formdata: [\r",
							"      {\r",
							"         \"key\": \"auth_token\",\r",
							"         \"value\": u_token,\r",
							"         \"type\": \"text\"\r",
							"      },\r",
							"      {\r",
							"         \"key\": \"curr_code\",\r",
							"         \"value\": Envir_Currency1[i], //используем наш обьект для подстановки Cur_ID\r",
							"         \"type\": \"int\"\r",
							"      }\r",
							"   ]\r",
							"}\r",
							"},\r",
							"//4) если возвращается 500 код, переходим к следующей итреации\r",
							"//5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"/*6) если поле есть, пишем в консоль инфу про фалюту в виде response\r",
							"{\r",
							"    \"Cur_Abbreviation\": str\r",
							"    \"Cur_ID\": int,\r",
							"    \"Cur_Name\": str,\r",
							"    \"Cur_OfficialRate\": float,\r",
							"    \"Cur_Scale\": int,\r",
							"    \"Date\": str\r",
							"}*/\r",
							"//7) переходим к следующей итерации\r",
							"        (err, res) => {\r",
							"                if (res.code==200){\r",
							"                    let jsonData = res.json();\r",
							"                    if (jsonData.Cur_OfficialRate)\r",
							"                        console.log(jsonData);\r",
							"                }\r",
							"});\r",
							"i++;\r",
							"} while (Envir_Currency1[i]!=null);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						},
						{
							"key": "name",
							"value": "Nick",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://168.119.182.98:5002/curr_byn",
					"protocol": "http",
					"host": [
						"168",
						"119",
						"182",
						"98"
					],
					"port": "5002",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}